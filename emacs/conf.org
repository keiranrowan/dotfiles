#+TITLE: EMACS CONFIG
#+AUTHOR: Keiran Rowan

Credit to
Karl:  https://gitlab.com/karl.win/emacsos/-/blob/master/config.org#exwm
Ryan:  https://ryan.himmelwright.net/post/org-babel-setup/

* Tweaks

** Linum Mode

#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook 'display-line-numbers-mode)
#+END_SRC

** Line/Column
    
#+BEGIN_SRC emacs-lisp
(column-number-mode 1)
(line-number-mode 1)
#+END_SRC

** Delete Selection

#+BEGIN_SRC emacs-lisp
(delete-selection-mode 1)
#+END_SRC

** Consolidate Backups

#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist
    `((".*" . , "~/.backup/")))
(setq auto-save-file-name-transforms
    `((".*" , "~/.backup/" t)))
#+END_SRC

** Remove Emacs UI

#+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
(menu-bar-mode -1)
(scroll-bar-mode -1)
#+END_SRC

** Subword Mode

#+BEGIN_SRC emacs-lisp
(subword-mode)
#+END_SRC

** Tab Width 

#+BEGIN_SRC emacs-lisp
(setq-default tab-width 4)
#+END_SRC

** Movement Bindings

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-p") 'backward-paragraph)
  (global-set-key (kbd "M-n") 'forward-paragraph)
  (global-set-key (kbd "C-=") 'scroll-up-line)
  (global-set-key (kbd "M-=") 'scroll-down-line)
  (global-set-key (kbd "M-\\") 'goto-line)
  (global-set-key (kbd "M-o") 'occur)
  (global-set-key (kbd "C-S-o") 'open-line)
#+END_SRC

* Functions
  
* Major Modes

** C Mode

#+BEGIN_SRC emacs-lisp
  (setq-default c-basic-offset 4)
#+END_SRC

** Haskell Mode

#+BEGIN_SRC emacs-lisp
(setq haskell-font-lock-symbols t)
#+END_SRC

** PHP Mode

#+BEGIN_SRC emacs-lisp
  (use-package php-mode
	:ensure t
	:mode ("\\.php\\'" . php-mode))

#+END_SRC

** Web Mode

#+BEGIN_SRC emacs-lisp
  (use-package web-mode
	:ensure t
	:mode (("\\.html\\'" . web-mode)
		   ("\\.html.twig\\'" . web-mode)
		   ("\\.css\\'" . web-mode))
	:config (use-package company-web))
#+END_SRC

** JS Mode

#+BEGIN_SRC emacs-lisp
  (use-package js2-mode
	:ensure t
	:mode ("\\.js\\'" . js2-mode))
#+END_SRC

** YAML Mode

#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode
	:ensure t
	:mode (("\\.yml\\'" . yaml-mode)
		   ("\\.yaml\\'" . yaml-mode)))
#+END_SRC

** Org Mode

#+BEGIN_SRC emacs-lisp
  (use-package org-mode
	:bind
	(("C-c l" . org-store-link)
	 ("C-c a" . org-agenda))
	:config
	((setq org-log-done t)
	 (setq org-todo-keywords '((sequence "TODO" "ONGOING" "BLOCKED" "DONE")))
	 (setq org-src-fontify-natively t)
	 (setq org-src-tab-acts-natively t)
	 (setq org-src-preserve-indentation t)
	 (setq org-agenda-files (list "~/orgs/agenda/")
	 (setq org-agenda-custom-commands
	       '(("c" "Simple agenda view"
		      ((agenda "")
			   (alltodo ""))))))))
#+END_SRC

* Packages

** PHPUnit

#+BEGIN_SRC emacs-lisp
(use-package phpunit
  :ensure t)
#+END_SRC

** LSP-Mode

Requires a PHP language server. Install with:
$ sudo npm i -g intelephense

#+BEGIN_SRC emacs-lisp
(use-package lsp-mode
   :ensure t
   :config
   (setq lsp-prefer-flymake nil)
   :hook 
   (php-mode . lsp)
   :commands lsp)
#+END_SRC

** LSP-UI

#+BEGIN_SRC emacs-lisp
(use-package lsp-ui
 :ensure t
 :requires lsp-mode flycheck
 :config
 (setq lsp-ui-doc-enable t
       lsp-ui-doc-use-childframe t
	   lsp-ui-doc-position 'top
	   lsp-ui-doc-include-signature t
	   lsp-ui-sideline-enable nil
	   lsp-ui-flycheck-enable t
	   lsp-ui-flycheck-list-position 'right
	   lsp-ui-flycheck-live-reporting t
	   lsp-ui-peek-enable t
	   lsp-ui-peek-list-width 60
	   lsp-ui-peek-peek-height 25)
 :hook (lsp-mode . lsp-ui-mode))
#+END_SRC

** Company LSP

#+BEGIN_SRC emacs-lisp
(use-package company-lsp
 :ensure t
 :commands company-lsp)
#+END_SRC

** Dashboard

#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :ensure t
	:config
	(dashboard-setup-startup-hook))
#+END_SRC

** Transient

#+BEGIN_SRC emacs-lisp
(use-package transient
	:ensure t)
#+END_SRC

** PHPActor

#+BEGIN_SRC emacs-lisp
  (use-package phpactor
	:ensure t)
#+END_SRC

** Company PHPActor

#+BEGIN_SRC emacs-lisp
  (use-package company-phpactor
	:ensure t)
#+END_SRC


** Sudo Edit
   
#+BEGIN_SRC emacs-lisp
  (use-package sudo-edit
	:ensure t
	:bind
	("C-s-s" . sudo-edit))
#+END_SRC

** Drag Stuff

#+BEGIN_SRC emacs-lisp
  (use-package drag-stuff
	:ensure t
	:custom
	drag-stuff-except-modes '(org-mode)
	:config
	(drag-stuff-define-keys)
	(drag-stuff-global-mode 1))
#+END_SRC

** Change Inner

#+BEGIN_SRC emacs-lisp
  (use-package change-inner
	:ensure t
	:bind
	(("C-c i" . change-inner)
	("C-c o" . change-outer)))
#+END_SRC

** Rainbow Mode

#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
	:ensure t)
#+END_SRC

** Flycheck

#+BEGIN_SRC emacs-lisp
  (use-package flycheck
	:ensure t
	:hook (prog-mode . flycheck-mode))
#+END_SRC

** Company

#+BEGIN_SRC emacs-lisp
  (use-package company
	:ensure t
	:hook (prog-mode . company-mode)
	:bind ("C-;" . company-complete))
#+END_SRC

** Origami

#+BEGIN_SRC emacs-lisp
  (use-package origami
	:ensure t
	:hook (prog-mode . origami-mode)
	:bind ("C-c t" . origami-toggle-mode))
#+END_SRC

** Rainbow Delimiters

#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
	:ensure t
	:hook (prog-mode . rainbow-delimiters-mode))
#+END_SRC

** Solaire Mode
   
#+BEGIN_SRC emacs-lisp
  (use-package solaire-mode
	:ensure t
	:config
	(solaire-global-mode +1)
	(solaire-mode-swap-bg)
	:hook ((minibuffer-setup . solaire-mode-in-minibuffer)
		   (after-revert . turn-on-solaire-mode)))
#+END_SRC

** Doom Modeline

#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
	:ensure t
	:hook (after-init . doom-modeline-mode))
#+END_SRC

** Doom One Theme

#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
	:ensure t
	:config
	(load-theme 'doom-one t))
#+END_SRC

** Helm

#+BEGIN_SRC emacs-lisp
  (use-package helm
	:ensure t
	:bind (("M-x" . helm-M-x) ; M-x Fuzzy Replacement
		   ("C-x r b" . helm-filtered-bookmarks)
		   ("C-x C-f" . helm-find-files) ; Fuzzy Find File
		   ("M-l" . helm-list-buffers) ; Fuzzy Buffer Search
		   ("M-y" . helm-show-kill-ring) ; Fuzzy Undo
		   ("C-x b" . helm-mini) ; Fuzzy Buffer & Recent
		   ("C-c m" . helm-semantic-or-imenu) ; Fuzzy Function Search
		   ("C-c f" . helm-find) ; Fuzzy Find File on FS
		   ("C-s" . helm-occur) ; Fuzzy Search
		   ("C-c h" . helm-eshell-history) ;History for Eshell
		   )
	:config 
	(helm-mode 1)
	(setq helm-buffers-fuzzy-matching t)
	(setq helm-recentf-fuzzy-match t))
#+END_SRC

** Magit

#+BEGIN_SRC emacs-lisp
  (use-package magit
	:ensure t) 
#+END_SRC
